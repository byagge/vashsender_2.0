#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –ø–æ—Å—Ç–µ–ø–µ–Ω–Ω–æ–≥–æ —É–≤–µ–ª–∏—á–µ–Ω–∏—è –æ–±—ä–µ–º–∞ —Ä–∞—Å—Å—ã–ª–æ–∫
–ü–æ–º–æ–≥–∞–µ—Ç –∏–∑–±–µ–∂–∞—Ç—å –ø–æ–ø–∞–¥–∞–Ω–∏—è –≤ —Å–ø–∞–º –ø—Ä–∏ –º–∞—Å—Å–æ–≤—ã—Ö —Ä–∞—Å—Å—ã–ª–∫–∞—Ö
"""

import os
import sys
import django
from datetime import datetime, timedelta

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Django
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'core.settings')
django.setup()

from apps.campaigns.models import Campaign, CampaignRecipient
from apps.mailer.models import Contact

def get_optimal_settings(volume):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫ –¥–ª—è –æ–±—ä–µ–º–∞"""
    
    if volume <= 100:
        return {
            'batch_size': 10,
            'rate_limit': 2,
            'retry_delay': 60,
            'description': '–ú–∞–ª—ã–µ —Ä–∞—Å—Å—ã–ª–∫–∏ (–¥–æ 100 –ø–∏—Å–µ–º)'
        }
    elif volume <= 500:
        return {
            'batch_size': 20,
            'rate_limit': 5,
            'retry_delay': 120,
            'description': '–°—Ä–µ–¥–Ω–∏–µ —Ä–∞—Å—Å—ã–ª–∫–∏ (100-500 –ø–∏—Å–µ–º)'
        }
    elif volume <= 1000:
        return {
            'batch_size': 30,
            'rate_limit': 8,
            'retry_delay': 180,
            'description': '–ë–æ–ª—å—à–∏–µ —Ä–∞—Å—Å—ã–ª–∫–∏ (500-1000 –ø–∏—Å–µ–º)'
        }
    elif volume <= 5000:
        return {
            'batch_size': 50,
            'rate_limit': 10,
            'retry_delay': 300,
            'description': '–û—á–µ–Ω—å –±–æ–ª—å—à–∏–µ —Ä–∞—Å—Å—ã–ª–∫–∏ (1000-5000 –ø–∏—Å–µ–º)'
        }
    else:
        return {
            'batch_size': 100,
            'rate_limit': 15,
            'retry_delay': 600,
            'description': '–ú–∞—Å—Å–æ–≤—ã–µ —Ä–∞—Å—Å—ã–ª–∫–∏ (5000+ –ø–∏—Å–µ–º)'
        }

def calculate_send_time(volume, settings):
    """–†–∞—Å—á–µ—Ç –≤—Ä–µ–º–µ–Ω–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏"""
    batches = (volume + settings['batch_size'] - 1) // settings['batch_size']
    time_per_batch = settings['batch_size'] / settings['rate_limit']
    total_time = batches * time_per_batch
    return total_time

def get_recommendations(volume, settings):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –¥–ª—è –æ–±—ä–µ–º–∞"""
    recommendations = []
    
    if volume > 5000:
        recommendations.extend([
            "–†–∞–∑–¥–µ–ª–∏—Ç–µ —Ä–∞—Å—Å—ã–ª–∫—É –Ω–∞ –Ω–µ—Å–∫–æ–ª—å–∫–æ —á–∞—Å—Ç–µ–π –ø–æ 1000-2000 –ø–∏—Å–µ–º",
            "–û—Ç–ø—Ä–∞–≤–ª—è–π—Ç–µ —á–∞—Å—Ç–∏ —Å –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–º 2-4 —á–∞—Å–∞",
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –≤–Ω–µ—à–Ω–∏–π SMTP (Yandex, Gmail, SendGrid)",
            "–ú–æ–Ω–∏—Ç–æ—Ä—å—Ç–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥–æ—Å—Ç–∞–≤–ª—è–µ–º–æ—Å—Ç–∏ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏"
        ])
    elif volume > 1000:
        recommendations.extend([
            "–û—Ç–ø—Ä–∞–≤–ª—è–π—Ç–µ –≤ –Ω–µ—Ä–∞–±–æ—á–µ–µ –≤—Ä–µ–º—è (–Ω–æ—á—å, –≤—ã—Ö–æ–¥–Ω—ã–µ)",
            "–†–∞–∑–¥–µ–ª–∏—Ç–µ –Ω–∞ 2-3 —á–∞—Å—Ç–∏",
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –≤–Ω–µ—à–Ω–∏–π SMTP",
            "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–∞—á–µ—Å—Ç–≤–æ —Å–ø–∏—Å–∫–∞ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤"
        ])
    elif volume > 500:
        recommendations.extend([
            "–û—Ç–ø—Ä–∞–≤–ª—è–π—Ç–µ –≤ –Ω–µ—Ä–∞–±–æ—á–µe –≤—Ä–µ–º—è",
            "–ú–æ–Ω–∏—Ç–æ—Ä—å—Ç–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥–æ—Å—Ç–∞–≤–ª—è–µ–º–æ—Å—Ç–∏",
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ —à–∞–±–ª–æ–Ω—ã –ø–∏—Å–µ–º",
            "–î–æ–±–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –¥–ª—è –æ—Ç–ø–∏—Å–∫–∏"
        ])
    else:
        recommendations.extend([
            "–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–¥—Ö–æ–¥—è—Ç –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –æ–±—ä–µ–º–∞",
            "–ú–æ–Ω–∏—Ç–æ—Ä—å—Ç–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥–æ—Å—Ç–∞–≤–ª—è–µ–º–æ—Å—Ç–∏",
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ —à–∞–±–ª–æ–Ω—ã –ø–∏—Å–µ–º"
        ])
    
    return recommendations

def main():
    print("üìä –ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä –æ–±—ä–µ–º–∞ —Ä–∞—Å—Å—ã–ª–æ–∫")
    print("=" * 50)
    
    while True:
        try:
            volume = int(input("\n–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–∏—Å–µ–º –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏: "))
            if volume > 0:
                break
            else:
                print("‚ùå –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –±–æ–ª—å—à–µ 0")
        except ValueError:
            print("‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ")
    
    settings = get_optimal_settings(volume)
    send_time = calculate_send_time(volume, settings)
    
    print(f"\nüìà –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è {volume} –ø–∏—Å–µ–º:")
    print(f"   –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {settings['description']}")
    print(f"   EMAIL_BATCH_SIZE: {settings['batch_size']}")
    print(f"   EMAIL_RATE_LIMIT: {settings['rate_limit']}")
    print(f"   EMAIL_RETRY_DELAY: {settings['retry_delay']}")
    
    print(f"\n‚è±Ô∏è  –ü—Ä–∏–º–µ—Ä–Ω–æ–µ –≤—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–∫–∏: {send_time:.1f} —Å–µ–∫—É–Ω–¥ ({send_time/60:.1f} –º–∏–Ω—É—Ç)")
    
    # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
    recommendations = get_recommendations(volume, settings)
    print(f"\nüí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:")
    for i, rec in enumerate(recommendations, 1):
        print(f"   {i}. {rec}")
    
    # –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
    config_content = f"""# –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø –î–õ–Ø –†–ê–°–°–´–õ–ö–ò {volume} –ü–ò–°–ï–ú
# –°–∫–æ–ø–∏—Ä—É–π—Ç–µ —ç—Ç–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤ —Ñ–∞–π–ª .env

# –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è {volume} –ø–∏—Å–µ–º
EMAIL_BATCH_SIZE={settings['batch_size']}
EMAIL_RATE_LIMIT={settings['rate_limit']}
EMAIL_RETRY_DELAY={settings['retry_delay']}

# –í—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–∫–∏: {send_time:.1f} —Å–µ–∫—É–Ω–¥ ({send_time/60:.1f} –º–∏–Ω—É—Ç)
# –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {settings['description']}
"""
    
    try:
        with open(f'config_{volume}_emails.txt', 'w', encoding='utf-8') as f:
            f.write(config_content)
        
        print(f"\n‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ config_{volume}_emails.txt")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e}")

if __name__ == "__main__":
    main() 