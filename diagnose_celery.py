#!/usr/bin/env python
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ –ø—Ä–æ–±–ª–µ–º —Å Celery
"""

import os
import sys
import django
import time
import redis
from datetime import datetime

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Django
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'core.settings.production')
django.setup()

from django.conf import settings
from apps.campaigns.models import Campaign, CampaignRecipient
from celery import current_app

def print_header(title):
    print("\n" + "="*60)
    print(f" {title}")
    print("="*60)

def check_celery_workers():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ Celery workers"""
    print_header("–ü–†–û–í–ï–†–ö–ê CELERY WORKERS")
    
    try:
        inspect = current_app.control.inspect()
        stats = inspect.stats()
        
        if not stats:
            print("‚ùå –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö Celery workers!")
            return False
        
        print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(stats)} –∞–∫—Ç–∏–≤–Ω—ã—Ö workers:")
        for worker_name, worker_stats in stats.items():
            print(f"  - {worker_name}")
            print(f"    Pool: {worker_stats.get('pool', {}).get('implementation', 'unknown')}")
            print(f"    Processes: {worker_stats.get('pool', {}).get('processes', 'unknown')}")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ workers: {e}")
        return False

def check_redis_connection():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Redis"""
    print_header("–ü–†–û–í–ï–†–ö–ê REDIS")
    
    try:
        r = redis.Redis.from_url(settings.CELERY_BROKER_URL)
        r.ping()
        print("‚úÖ Redis –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—á–µ—Ä–µ–¥–∏
        queues = ['campaigns', 'email', 'default']
        for queue in queues:
            length = r.llen(queue)
            print(f"  –û—á–µ—Ä–µ–¥—å {queue}: {length} –∑–∞–¥–∞—á")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Redis: {e}")
        return False

def check_active_tasks():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á"""
    print_header("–ê–ö–¢–ò–í–ù–´–ï –ó–ê–î–ê–ß–ò")
    
    try:
        inspect = current_app.control.inspect()
        active_tasks = inspect.active()
        
        if not active_tasks:
            print("‚úÖ –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á")
            return
        
        total_tasks = 0
        for worker, tasks in active_tasks.items():
            print(f"Worker {worker}: {len(tasks)} –∑–∞–¥–∞—á")
            total_tasks += len(tasks)
            
            for task in tasks[:3]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 3 –∑–∞–¥–∞—á–∏
                task_id = task.get('id', 'unknown')
                task_name = task.get('name', 'unknown')
                task_time = task.get('time_start', 0)
                
                if task_time:
                    task_age = (time.time() - task_time) / 60
                    print(f"  - {task_name} (ID: {task_id[:8]}...) - {task_age:.1f} –º–∏–Ω")
        
        print(f"–í—Å–µ–≥–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á: {total_tasks}")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á: {e}")

def check_stuck_campaigns():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å—à–∏—Ö –∫–∞–º–ø–∞–Ω–∏–π"""
    print_header("–ó–ê–í–ò–°–®–ò–ï –ö–ê–ú–ü–ê–ù–ò–ò")
    
    from django.utils import timezone
    from datetime import timedelta
    
    # –ö–∞–º–ø–∞–Ω–∏–∏ –≤ —Å—Ç–∞—Ç—É—Å–µ "sending" –±–æ–ª–µ–µ 30 –º–∏–Ω—É—Ç
    stuck_time = timezone.now() - timedelta(minutes=30)
    stuck_campaigns = Campaign.objects.filter(
        status=Campaign.STATUS_SENDING,
        updated_at__lt=stuck_time
    )
    
    if not stuck_campaigns.exists():
        print("‚úÖ –ù–µ—Ç –∑–∞–≤–∏—Å—à–∏—Ö –∫–∞–º–ø–∞–Ω–∏–π")
        return
    
    print(f"‚ùå –ù–∞–π–¥–µ–Ω–æ {stuck_campaigns.count()} –∑–∞–≤–∏—Å—à–∏—Ö –∫–∞–º–ø–∞–Ω–∏–π:")
    
    for campaign in stuck_campaigns[:5]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 5
        age = (timezone.now() - campaign.updated_at).total_seconds() / 60
        print(f"  - {campaign.name} (ID: {campaign.id})")
        print(f"    –í–æ–∑—Ä–∞—Å—Ç: {age:.1f} –º–∏–Ω—É—Ç")
        print(f"    Task ID: {campaign.celery_task_id}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö –ø–∏—Å–µ–º
        sent_count = CampaignRecipient.objects.filter(
            campaign=campaign, 
            is_sent=True
        ).count()
        total_recipients = sum(cl.contacts.count() for cl in campaign.contact_lists.all())
        print(f"    –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {sent_count}/{total_recipients}")

def check_recent_campaigns():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–µ–¥–∞–≤–Ω–∏—Ö –∫–∞–º–ø–∞–Ω–∏–π"""
    print_header("–ù–ï–î–ê–í–ù–ò–ï –ö–ê–ú–ü–ê–ù–ò–ò")
    
    from django.utils import timezone
    from datetime import timedelta
    
    # –ö–∞–º–ø–∞–Ω–∏–∏ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞
    recent_time = timezone.now() - timedelta(hours=24)
    recent_campaigns = Campaign.objects.filter(
        created_at__gte=recent_time
    ).order_by('-created_at')[:10]
    
    if not recent_campaigns.exists():
        print("–ù–µ—Ç –∫–∞–º–ø–∞–Ω–∏–π –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞")
        return
    
    print(f"–ö–∞–º–ø–∞–Ω–∏–∏ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞:")
    
    for campaign in recent_campaigns:
        age = (timezone.now() - campaign.created_at).total_seconds() / 3600
        sent_count = CampaignRecipient.objects.filter(
            campaign=campaign, 
            is_sent=True
        ).count()
        total_recipients = sum(cl.contacts.count() for cl in campaign.contact_lists.all())
        
        status_icon = {
            'draft': 'üìù',
            'sending': 'üì§',
            'sent': '‚úÖ',
            'failed': '‚ùå',
            'pending': '‚è≥'
        }.get(campaign.status, '‚ùì')
        
        print(f"  {status_icon} {campaign.name}")
        print(f"    –°—Ç–∞—Ç—É—Å: {campaign.status} (–≤–æ–∑—Ä–∞—Å—Ç: {age:.1f}—á)")
        print(f"    –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {sent_count}/{total_recipients}")
        if campaign.celery_task_id:
            print(f"    Task ID: {campaign.celery_task_id}")

def check_system_resources():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö —Ä–µ—Å—É—Ä—Å–æ–≤"""
    print_header("–°–ò–°–¢–ï–ú–ù–´–ï –†–ï–°–£–†–°–´")
    
    try:
        import psutil
        
        # CPU
        cpu_percent = psutil.cpu_percent(interval=1)
        print(f"CPU: {cpu_percent}%")
        
        # Memory
        memory = psutil.virtual_memory()
        print(f"RAM: {memory.percent}% ({memory.used // 1024**3}GB / {memory.total // 1024**3}GB)")
        
        # Disk
        disk = psutil.disk_usage('/')
        print(f"Disk: {disk.percent}% ({disk.used // 1024**3}GB / {disk.total // 1024**3}GB)")
        
        # Network connections
        connections = psutil.net_connections()
        print(f"Network connections: {len(connections)}")
        
    except ImportError:
        print("psutil –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É —Ä–µ—Å—É—Ä—Å–æ–≤")
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–µ—Å—É—Ä—Å–æ–≤: {e}")

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏"""
    print(f"üîç –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê CELERY - {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–∑–æ–≤—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
    redis_ok = check_redis_connection()
    workers_ok = check_celery_workers()
    
    if not redis_ok or not workers_ok:
        print("\n‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ï –ü–†–û–ë–õ–ï–ú–´ –û–ë–ù–ê–†–£–ñ–ï–ù–´!")
        print("–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:")
        if not redis_ok:
            print("- –ü—Ä–æ–≤–µ—Ä—å—Ç–µ, —á—Ç–æ Redis –∑–∞–ø—É—â–µ–Ω")
        if not workers_ok:
            print("- –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ Celery workers")
        return
    
    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏
    check_active_tasks()
    check_stuck_campaigns()
    check_recent_campaigns()
    check_system_resources()
    
    print("\n‚úÖ –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")

if __name__ == '__main__':
    main() 