#!/usr/bin/env python
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ DKIM –∏ —É–ª—É—á—à–µ–Ω–∏—è –¥–æ—Å—Ç–∞–≤–ª—è–µ–º–æ—Å—Ç–∏ –ø–∏—Å–µ–º –≤ Mail.ru
"""

import os
import sys
import django
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –ø—Ä–æ–µ–∫—Ç—É
project_root = Path(__file__).parent
sys.path.insert(0, str(project_root))

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Django
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'core.settings.dev')
django.setup()

from django.conf import settings
from apps.emails.models import Domain, SenderEmail
from apps.emails.dkim_service import DKIMService
import dns.resolver
import dns.reversename
import dns.resolver


def check_dns_records():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç DNS –∑–∞–ø–∏—Å–∏ –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è –¥–æ—Å—Ç–∞–≤–ª—è–µ–º–æ—Å—Ç–∏"""
    print("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ DNS –∑–∞–ø–∏—Å–µ–π...")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º rDNS
    print("\n1. –ü—Ä–æ–≤–µ—Ä–∫–∞ rDNS (–æ–±—Ä–∞—Ç–Ω—ã–π DNS):")
    try:
        ip = "146.185.196.123"
        reverse_name = dns.reversename.from_address(ip)
        answers = dns.resolver.resolve(reverse_name, "PTR")
        ptr_record = str(answers[0])
        print(f"   IP {ip} ‚Üí {ptr_record}")
        
        if "vashsender.ru" in ptr_record:
            print("   ‚úÖ rDNS –Ω–∞—Å—Ç—Ä–æ–µ–Ω –ø—Ä–∞–≤–∏–ª—å–Ω–æ")
        else:
            print("   ‚ùå rDNS –ù–ï –Ω–∞—Å—Ç—Ä–æ–µ–Ω –ø—Ä–∞–≤–∏–ª—å–Ω–æ!")
            print("   –ù—É–∂–Ω–æ: 146.185.196.123 ‚Üí mail.vashsender.ru")
    except Exception as e:
        print(f"   ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ rDNS: {e}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º SPF
    print("\n2. –ü—Ä–æ–≤–µ—Ä–∫–∞ SPF –∑–∞–ø–∏—Å–∏:")
    try:
        answers = dns.resolver.resolve("vashsender.ru", "TXT")
        spf_found = False
        for rdata in answers:
            txt = ''.join(rdata.strings).decode('utf-8')
            if txt.startswith('v=spf1'):
                print(f"   SPF: {txt}")
                if "146.185.196.123" in txt:
                    print("   ‚úÖ SPF —Å–æ–¥–µ—Ä–∂–∏—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π IP")
                    spf_found = True
                else:
                    print("   ‚ùå SPF –ù–ï —Å–æ–¥–µ—Ä–∂–∏—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π IP!")
        if not spf_found:
            print("   ‚ùå SPF –∑–∞–ø–∏—Å—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!")
    except Exception as e:
        print(f"   ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ SPF: {e}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º DKIM
    print("\n3. –ü—Ä–æ–≤–µ—Ä–∫–∞ DKIM –∑–∞–ø–∏—Å–µ–π:")
    try:
        selector = getattr(settings, 'DKIM_SELECTOR', 'ep1')
        dkim_name = f"{selector}._domainkey.vashsender.ru"
        answers = dns.resolver.resolve(dkim_name, "TXT")
        for rdata in answers:
            txt = ''.join(rdata.strings).decode('utf-8')
            if txt.startswith('v=DKIM1'):
                print(f"   DKIM ({selector}): {txt[:100]}...")
                print("   ‚úÖ DKIM –∑–∞–ø–∏—Å—å –Ω–∞–π–¥–µ–Ω–∞")
                break
        else:
            print(f"   ‚ùå DKIM –∑–∞–ø–∏—Å—å –¥–ª—è —Å–µ–ª–µ–∫—Ç–æ—Ä–∞ {selector} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!")
    except Exception as e:
        print(f"   ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ DKIM: {e}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º DMARC
    print("\n4. –ü—Ä–æ–≤–µ—Ä–∫–∞ DMARC –∑–∞–ø–∏—Å–∏:")
    try:
        answers = dns.resolver.resolve("_dmarc.vashsender.ru", "TXT")
        dmarc_found = False
        for rdata in answers:
            txt = ''.join(rdata.strings).decode('utf-8')
            if txt.startswith('v=DMARC1'):
                print(f"   DMARC: {txt}")
                dmarc_found = True
                break
        if not dmarc_found:
            print("   ‚ùå DMARC –∑–∞–ø–∏—Å—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!")
            print("   –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –¥–æ–±–∞–≤–∏—Ç—å: v=DMARC1; p=quarantine; rua=mailto:dmarc@vashsender.ru")
    except Exception as e:
        print(f"   ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ DMARC: {e}")


def setup_dkim_for_domains():
    """–ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç DKIM –¥–ª—è –≤—Å–µ—Ö –¥–æ–º–µ–Ω–æ–≤ –≤ —Å–∏—Å—Ç–µ–º–µ"""
    print("\nüîß –ù–∞—Å—Ç—Ä–æ–π–∫–∞ DKIM –¥–ª—è –¥–æ–º–µ–Ω–æ–≤...")
    
    service = DKIMService()
    
    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –¥–æ–º–µ–Ω—ã
    domains = Domain.objects.all()
    print(f"–ù–∞–π–¥–µ–Ω–æ –¥–æ–º–µ–Ω–æ–≤: {domains.count()}")
    
    for domain in domains:
        print(f"\n–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–æ–º–µ–Ω–∞: {domain.domain_name}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ DKIM –∫–ª—é—á–∏
        if domain.public_key and domain.private_key_path:
            print(f"   DKIM –∫–ª—é—á–∏ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ñ–∞–π–ª –ø—Ä–∏–≤–∞—Ç–Ω–æ–≥–æ –∫–ª—é—á–∞ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
            if os.path.exists(domain.private_key_path):
                print(f"   ‚úÖ –ü—Ä–∏–≤–∞—Ç–Ω—ã–π –∫–ª—é—á –Ω–∞–π–¥–µ–Ω: {domain.private_key_path}")
            else:
                print(f"   ‚ùå –ü—Ä–∏–≤–∞—Ç–Ω—ã–π –∫–ª—é—á –Ω–µ –Ω–∞–π–¥–µ–Ω: {domain.private_key_path}")
                print(f"   –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–æ–≤—ã–µ –∫–ª—é—á–∏...")
                if domain.generate_dkim_keys():
                    print(f"   ‚úÖ –ù–æ–≤—ã–µ DKIM –∫–ª—é—á–∏ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω—ã")
                else:
                    print(f"   ‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ DKIM –∫–ª—é—á–µ–π")
        else:
            print(f"   DKIM –∫–ª—é—á–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç, –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º...")
            if domain.generate_dkim_keys():
                print(f"   ‚úÖ DKIM –∫–ª—é—á–∏ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω—ã")
            else:
                print(f"   ‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ DKIM –∫–ª—é—á–µ–π")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º DNS –∑–∞–ø–∏—Å—å –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è
        if domain.public_key:
            print(f"   DNS –∑–∞–ø–∏—Å—å –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è:")
            print(f"   {domain.dkim_dns_record}")


def check_email_headers():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∑–∞–≥–æ–ª–æ–≤–∫–∏ –ø–∏—Å–µ–º –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è –¥–æ—Å—Ç–∞–≤–ª—è–µ–º–æ—Å—Ç–∏"""
    print("\nüìß –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ –ø–∏—Å–µ–º...")
    
    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ email –∞–¥—Ä–µ—Å–∞ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª–µ–π
    sender_emails = SenderEmail.objects.all()
    print(f"–ù–∞–π–¥–µ–Ω–æ email –∞–¥—Ä–µ—Å–æ–≤ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª–µ–π: {sender_emails.count()}")
    
    for sender in sender_emails:
        print(f"\nEmail: {sender.email}")
        print(f"   –î–æ–º–µ–Ω: {sender.domain.domain_name}")
        print(f"   –ò–º—è –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è: '{sender.sender_name}'")
        print(f"   Reply-To: {sender.reply_to}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å email
        if '@' in sender.email and sender.email.count('@') == 1:
            print(f"   ‚úÖ Email –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π")
        else:
            print(f"   ‚ùå Email –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π!")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ–º–µ–Ω
        domain_part = sender.email.split('@')[1] if '@' in sender.email else ''
        if domain_part == sender.domain.domain_name:
            print(f"   ‚úÖ –î–æ–º–µ–Ω —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç")
        else:
            print(f"   ‚ùå –î–æ–º–µ–Ω –ù–ï —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç!")


def generate_dns_recommendations():
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ DNS"""
    print("\nüìã –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ DNS:")
    
    print("\n1. SPF –∑–∞–ø–∏—Å—å (–¥–æ–±–∞–≤–∏—Ç—å –≤ DNS vashsender.ru):")
    print("   v=spf1 ip4:146.185.196.123 ~all")
    
    print("\n2. DMARC –∑–∞–ø–∏—Å—å (–¥–æ–±–∞–≤–∏—Ç—å –≤ DNS _dmarc.vashsender.ru):")
    print("   v=DMARC1; p=quarantine; rua=mailto:dmarc@vashsender.ru; ruf=mailto:dmarc@vashsender.ru")
    
    print("\n3. rDNS –∑–∞–ø–∏—Å—å (–Ω–∞—Å—Ç—Ä–æ–∏—Ç—å —É —Ö–æ—Å—Ç–∏–Ω–≥-–ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞):")
    print("   146.185.196.123 ‚Üí mail.vashsender.ru")
    
    print("\n4. A –∑–∞–ø–∏—Å—å –¥–ª—è mail.vashsender.ru:")
    print("   mail.vashsender.ru ‚Üí 146.185.196.123")
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º DKIM –∑–∞–ø–∏—Å–∏ –¥–ª—è –≤—Å–µ—Ö –¥–æ–º–µ–Ω–æ–≤
    domains = Domain.objects.all()
    if domains.exists():
        print("\n5. DKIM –∑–∞–ø–∏—Å–∏:")
        for domain in domains:
            if domain.public_key:
                selector = domain.dkim_selector
                print(f"   {selector}._domainkey.{domain.domain_name} (TXT):")
                print(f"   {domain.dkim_dns_record}")


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üöÄ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –¥–æ—Å—Ç–∞–≤–ª—è–µ–º–æ—Å—Ç–∏ –ø–∏—Å–µ–º –¥–ª—è Mail.ru")
    print("=" * 50)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º DNS –∑–∞–ø–∏—Å–∏
    check_dns_records()
    
    # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º DKIM
    setup_dkim_for_domains()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ –ø–∏—Å–µ–º
    check_email_headers()
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
    generate_dns_recommendations()
    
    print("\n" + "=" * 50)
    print("‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
    print("\nüìù –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:")
    print("1. –ù–∞—Å—Ç—Ä–æ–π—Ç–µ DNS –∑–∞–ø–∏—Å–∏ —Å–æ–≥–ª–∞—Å–Ω–æ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è–º –≤—ã—à–µ")
    print("2. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –±–∏–±–ª–∏–æ—Ç–µ–∫—É dkimpy: pip install dkimpy")
    print("3. –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ Celery workers")
    print("4. –ü–æ–¥–æ–∂–¥–∏—Ç–µ 24-48 —á–∞—Å–∞ –¥–ª—è —Ä–∞—Å–ø—Ä–æ—Å—Ç—Ä–∞–Ω–µ–Ω–∏—è DNS –∏–∑–º–µ–Ω–µ–Ω–∏–π")
    print("5. –ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä—É–π—Ç–µ –æ—Ç–ø—Ä–∞–≤–∫—É –ø–∏—Å–µ–º")


if __name__ == "__main__":
    main() 