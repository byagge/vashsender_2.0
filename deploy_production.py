#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è VashSender –Ω–∞ –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ
"""

import subprocess
import sys
import os
import time
from pathlib import Path


class ProductionDeployer:
    def __init__(self):
        self.project_root = Path.cwd()
        
    def run_command(self, command, description):
        """–í—ã–ø–æ–ª–Ω—è–µ—Ç –∫–æ–º–∞–Ω–¥—É —Å –≤—ã–≤–æ–¥–æ–º"""
        print(f"üîÑ {description}...")
        try:
            result = subprocess.run(command, shell=True, check=True, 
                                  capture_output=True, text=True)
            print(f"‚úÖ {description} –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ")
            return True
        except subprocess.CalledProcessError as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ {description.lower()}: {e}")
            print(f"STDOUT: {e.stdout}")
            print(f"STDERR: {e.stderr}")
            return False
    
    def check_prerequisites(self):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã"""
        print("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã—Ö —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π...")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º Python
        if not self.run_command("python --version", "–ü—Ä–æ–≤–µ—Ä–∫–∞ Python"):
            return False
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º pip
        if not self.run_command("pip --version", "–ü—Ä–æ–≤–µ—Ä–∫–∞ pip"):
            return False
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º git
        if not self.run_command("git --version", "–ü—Ä–æ–≤–µ—Ä–∫–∞ git"):
            return False
        
        return True
    
    def install_dependencies(self):
        """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏"""
        print("üì¶ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π...")
        
        # –û–±–Ω–æ–≤–ª—è–µ–º pip
        if not self.run_command("pip install --upgrade pip", "–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ pip"):
            return False
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
        if not self.run_command("pip install -r requirements.txt", "–£—Å—Ç–∞–Ω–æ–≤–∫–∞ Python –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π"):
            return False
        
        return True
    
    def setup_database(self):
        """–ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö"""
        print("üóÑÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...")
        
        # –ü—Ä–∏–º–µ–Ω—è–µ–º –º–∏–≥—Ä–∞—Ü–∏–∏
        if not self.run_command("python manage.py migrate", "–ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –º–∏–≥—Ä–∞—Ü–∏–π"):
            return False
        
        # –°–æ–∑–¥–∞–µ–º —Å—É–ø–µ—Ä–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
        if not self.run_command("python manage.py createsuperuser --noinput", "–°–æ–∑–¥–∞–Ω–∏–µ —Å—É–ø–µ—Ä–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"):
            print("‚ö†Ô∏è –°—É–ø–µ—Ä–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏–ª–∏ –æ—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è")
        
        return True
    
    def setup_static_files(self):
        """–ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ñ–∞–π–ª—ã"""
        print("üìÅ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏—Ö —Ñ–∞–π–ª–æ–≤...")
        
        # –°–æ–±–∏—Ä–∞–µ–º —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ñ–∞–π–ª—ã
        if not self.run_command("python manage.py collectstatic --noinput", "–°–±–æ—Ä —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏—Ö —Ñ–∞–π–ª–æ–≤"):
            return False
        
        return True
    
    def setup_redis(self):
        """–ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç Redis"""
        print("üî¥ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Redis...")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞–ø—É—â–µ–Ω –ª–∏ Redis
        try:
            result = subprocess.run("redis-cli ping", shell=True, capture_output=True, text=True)
            if result.stdout.strip() == 'PONG':
                print("‚úÖ Redis —É–∂–µ –∑–∞–ø—É—â–µ–Ω")
                return True
        except:
            pass
        
        # –ü—ã—Ç–∞–µ–º—Å—è –∑–∞–ø—É—Å—Ç–∏—Ç—å Redis
        print("üöÄ –ó–∞–ø—É—Å–∫ Redis...")
        if not self.run_command("redis-server --daemonize yes", "–ó–∞–ø—É—Å–∫ Redis"):
            print("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å Redis. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ Redis —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.")
            return False
        
        return True
    
    def setup_celery(self):
        """–ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç Celery"""
        print("üåø –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Celery...")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ Redis –¥–æ—Å—Ç—É–ø–µ–Ω
        time.sleep(2)
        try:
            result = subprocess.run("redis-cli ping", shell=True, capture_output=True, text=True)
            if result.stdout.strip() != 'PONG':
                print("‚ùå Redis –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
                return False
        except:
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ Redis")
            return False
        
        print("‚úÖ Celery –≥–æ—Ç–æ–≤ –∫ –∑–∞–ø—É—Å–∫—É")
        return True
    
    def create_systemd_services(self):
        """–°–æ–∑–¥–∞–µ—Ç systemd —Å–µ—Ä–≤–∏—Å—ã"""
        print("‚öôÔ∏è –°–æ–∑–¥–∞–Ω–∏–µ systemd —Å–µ—Ä–≤–∏—Å–æ–≤...")
        
        services = {
            'vashsender-celery': '''[Unit]
Description=VashSender Celery Worker
After=network.target

[Service]
Type=forking
User=www-data
Group=www-data
WorkingDirectory={}
Environment=DJANGO_SETTINGS_MODULE=core.settings.production
ExecStart=/usr/bin/celery -A core worker --loglevel=info --concurrency=8 --queues=email,campaigns,default
ExecReload=/bin/kill -s HUP $MAINPID
KillMode=mixed
TimeoutStopSec=5
PrivateTmp=true

[Install]
WantedBy=multi-user.target'''.format(self.project_root),
            
            'vashsender-flower': '''[Unit]
Description=VashSender Flower Monitor
After=network.target

[Service]
Type=simple
User=www-data
Group=www-data
WorkingDirectory={}
Environment=DJANGO_SETTINGS_MODULE=core.settings.production
ExecStart=/usr/bin/celery -A core flower --port=5555 --host=0.0.0.0
Restart=always

[Install]
WantedBy=multi-user.target'''.format(self.project_root),
            
            'vashsender-gunicorn': '''[Unit]
Description=VashSender Gunicorn
After=network.target

[Service]
Type=notify
User=www-data
Group=www-data
WorkingDirectory={}
Environment=DJANGO_SETTINGS_MODULE=core.settings.production
ExecStart=/usr/local/bin/gunicorn --workers 4 --bind 0.0.0.0:8000 core.wsgi:application
ExecReload=/bin/kill -s HUP $MAINPID
KillMode=mixed
TimeoutStopSec=5
PrivateTmp=true

[Install]
WantedBy=multi-user.target'''.format(self.project_root)
        }
        
        for service_name, service_content in services.items():
            service_path = f"/etc/systemd/system/{service_name}.service"
            
            try:
                with open(service_path, 'w') as f:
                    f.write(service_content)
                print(f"‚úÖ –°–æ–∑–¥–∞–Ω —Å–µ—Ä–≤–∏—Å {service_name}")
            except PermissionError:
                print(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å {service_name}.service (–Ω—É–∂–Ω—ã –ø—Ä–∞–≤–∞ sudo)")
        
        return True
    
    def setup_nginx(self):
        """–ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç Nginx"""
        print("üåê –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Nginx...")
        
        nginx_config = '''server {
    listen 80;
    server_name vashsender.ru www.vashsender.ru;
    
    # –¢–∞–π–º–∞—É—Ç—ã –¥–ª—è –±–æ–ª—å—à–∏—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ –∏–º–ø–æ—Ä—Ç–∞
    client_max_body_size 100M;
    client_body_timeout 300s;
    client_header_timeout 300s;
    proxy_connect_timeout 300s;
    proxy_send_timeout 300s;
    proxy_read_timeout 300s;
    send_timeout 300s;
    
    location /static/ {
        alias /var/www/vashsender/static/;
        expires 30d;
        add_header Cache-Control "public, immutable";
    }
    
    location /media/ {
        alias /var/www/vashsender/media/;
        expires 30d;
        add_header Cache-Control "public";
    }
    
    location / {
        proxy_pass http://127.0.0.1:8000;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ç–∞–π–º–∞—É—Ç—ã –¥–ª—è API –∑–∞–ø—Ä–æ—Å–æ–≤
        proxy_connect_timeout 300s;
        proxy_send_timeout 300s;
        proxy_read_timeout 300s;
    }
    
    location /flower/ {
        proxy_pass http://127.0.0.1:5555;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
    }
}'''
        
        try:
            with open('/etc/nginx/sites-available/vashsender', 'w') as f:
                f.write(nginx_config)
            print("‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è Nginx —Å–æ–∑–¥–∞–Ω–∞")
        except PermissionError:
            print("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é Nginx (–Ω—É–∂–Ω—ã –ø—Ä–∞–≤–∞ sudo)")
        
        return True
    
    def run_health_check(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –ø—Ä–æ–≤–µ—Ä–∫—É –∑–¥–æ—Ä–æ–≤—å—è —Å–∏—Å—Ç–µ–º—ã"""
        print("üè• –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è —Å–∏—Å—Ç–µ–º—ã...")
        
        if not self.run_command("python manage.py health_check --full", "–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è"):
            return False
        
        return True
    
    def deploy(self):
        """–û—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è"""
        print("üöÄ –†–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ VashSender –Ω–∞ –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ")
        print("=" * 60)
        
        steps = [
            ("–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã—Ö —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π", self.check_prerequisites),
            ("–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π", self.install_dependencies),
            ("–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö", self.setup_database),
            ("–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏—Ö —Ñ–∞–π–ª–æ–≤", self.setup_static_files),
            ("–ù–∞—Å—Ç—Ä–æ–π–∫–∞ Redis", self.setup_redis),
            ("–ù–∞—Å—Ç—Ä–æ–π–∫–∞ Celery", self.setup_celery),
            ("–°–æ–∑–¥–∞–Ω–∏–µ systemd —Å–µ—Ä–≤–∏—Å–æ–≤", self.create_systemd_services),
            ("–ù–∞—Å—Ç—Ä–æ–π–∫–∞ Nginx", self.setup_nginx),
            ("–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è —Å–∏—Å—Ç–µ–º—ã", self.run_health_check),
        ]
        
        for step_name, step_func in steps:
            print(f"\nüìã {step_name}")
            print("-" * 40)
            
            if not step_func():
                print(f"‚ùå –û—à–∏–±–∫–∞ –Ω–∞ —ç—Ç–∞–ø–µ: {step_name}")
                return False
        
        print("\n" + "=" * 60)
        print("üéâ –†–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ!")
        print("\nüìã –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:")
        print("1. –ù–∞—Å—Ç—Ä–æ–π—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –≤ .env —Ñ–∞–π–ª–µ")
        print("2. –ó–∞–ø—É—Å—Ç–∏—Ç–µ —Å–µ—Ä–≤–∏—Å—ã: sudo systemctl start vashsender-*")
        print("3. –í–∫–ª—é—á–∏—Ç–µ –∞–≤—Ç–æ–∑–∞–ø—É—Å–∫: sudo systemctl enable vashsender-*")
        print("4. –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ Nginx: sudo systemctl restart nginx")
        print("5. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å: http://vashsender.ru")
        
        return True


def main():
    deployer = ProductionDeployer()
    
    if not deployer.deploy():
        print("\n‚ùå –†–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ –Ω–µ —É–¥–∞–ª–æ—Å—å")
        sys.exit(1)


if __name__ == '__main__':
    main() 