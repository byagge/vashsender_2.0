#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –∑–∞–ø—É—Å–∫–∞ —Å–∏—Å—Ç–µ–º—ã –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–∏—Å–µ–º VashSender
–ó–∞–ø—É—Å–∫–∞–µ—Ç –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã: Redis, Celery Worker, Flower
"""

import subprocess
import sys
import time
import os
import signal
import threading
from pathlib import Path

class EmailSystemManager:
    def __init__(self):
        self.processes = []
        self.running = True
        
    def check_redis(self):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –∑–∞–ø—É—â–µ–Ω –ª–∏ Redis"""
        try:
            result = subprocess.run(['redis-cli', 'ping'], 
                                  capture_output=True, text=True, timeout=5)
            return result.stdout.strip() == 'PONG'
        except:
            return False
    
    def start_redis(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç Redis –µ—Å–ª–∏ –Ω–µ –∑–∞–ø—É—â–µ–Ω"""
        if self.check_redis():
            print("‚úÖ Redis —É–∂–µ –∑–∞–ø—É—â–µ–Ω")
            return
        
        print("üöÄ –ó–∞–ø—É—Å–∫ Redis...")
        try:
            # –ü—ã—Ç–∞–µ–º—Å—è –∑–∞–ø—É—Å—Ç–∏—Ç—å Redis
            process = subprocess.Popen(['redis-server'], 
                                     stdout=subprocess.PIPE, 
                                     stderr=subprocess.PIPE)
            time.sleep(2)
            
            if self.check_redis():
                print("‚úÖ Redis —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω")
                self.processes.append(('redis-server', process))
            else:
                print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å Redis")
                print("–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ Redis: sudo apt install redis-server")
                sys.exit(1)
                
        except FileNotFoundError:
            print("‚ùå Redis –Ω–µ –Ω–∞–π–¥–µ–Ω")
            print("–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ Redis: sudo apt install redis-server")
            sys.exit(1)
    
    def start_celery_worker(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç Celery Worker"""
        print("üöÄ –ó–∞–ø—É—Å–∫ Celery Worker...")
        try:
            process = subprocess.Popen([
                'python', 'manage.py', 'start_celery_worker',
                '--concurrency=8',
                '--queues=email,campaigns,default',
                '--loglevel=info'
            ], stdout=subprocess.PIPE, stderr=subprocess.PIPE)
            
            self.processes.append(('celery-worker', process))
            print("‚úÖ Celery Worker –∑–∞–ø—É—â–µ–Ω")
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ Celery Worker: {e}")
            sys.exit(1)
    
    def start_flower(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç Flower –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"""
        print("üöÄ –ó–∞–ø—É—Å–∫ Flower (–º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥)...")
        try:
            process = subprocess.Popen([
                'python', 'manage.py', 'start_flower',
                '--port=5555',
                '--host=localhost'
            ], stdout=subprocess.PIPE, stderr=subprocess.PIPE)
            
            self.processes.append(('flower', process))
            print("‚úÖ Flower –∑–∞–ø—É—â–µ–Ω (http://localhost:5555)")
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ Flower: {e}")
    
    def start_django(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç Django —Å–µ—Ä–≤–µ—Ä"""
        print("üöÄ –ó–∞–ø—É—Å–∫ Django —Å–µ—Ä–≤–µ—Ä–∞...")
        try:
            process = subprocess.Popen([
                'python', 'manage.py', 'runserver', '0.0.0.0:8000'
            ], stdout=subprocess.PIPE, stderr=subprocess.PIPE)
            
            self.processes.append(('django', process))
            print("‚úÖ Django —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω (http://localhost:8000)")
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ Django: {e}")
            sys.exit(1)
    
    def monitor_processes(self):
        """–ú–æ–Ω–∏—Ç–æ—Ä–∏—Ç –ø—Ä–æ—Ü–µ—Å—Å—ã –∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ—Ç —É–ø–∞–≤—à–∏–µ"""
        while self.running:
            for name, process in self.processes[:]:
                if process.poll() is not None:
                    print(f"‚ö†Ô∏è  –ü—Ä–æ—Ü–µ—Å—Å {name} –∑–∞–≤–µ—Ä—à–∏–ª—Å—è, –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫...")
                    self.processes.remove((name, process))
                    
                    if name == 'celery-worker':
                        self.start_celery_worker()
                    elif name == 'flower':
                        self.start_flower()
                    elif name == 'django':
                        self.start_django()
            
            time.sleep(5)
    
    def signal_handler(self, signum, frame):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–∏–≥–Ω–∞–ª–æ–≤ –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è"""
        print("\nüõë –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è, –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é –ø—Ä–æ—Ü–µ—Å—Å—ã...")
        self.running = False
        
        for name, process in self.processes:
            print(f"–û—Å—Ç–∞–Ω–æ–≤–∫–∞ {name}...")
            try:
                process.terminate()
                process.wait(timeout=10)
            except subprocess.TimeoutExpired:
                process.kill()
        
        print("‚úÖ –í—Å–µ –ø—Ä–æ—Ü–µ—Å—Å—ã –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã")
        sys.exit(0)
    
    def run(self):
        """–û—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥ –∑–∞–ø—É—Å–∫–∞ —Å–∏—Å—Ç–µ–º—ã"""
        print("üöÄ –ó–∞–ø—É—Å–∫ —Å–∏—Å—Ç–µ–º—ã –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–∏—Å–µ–º VashSender")
        print("=" * 50)
        
        # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–∏–≥–Ω–∞–ª–æ–≤
        signal.signal(signal.SIGINT, self.signal_handler)
        signal.signal(signal.SIGTERM, self.signal_handler)
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
        self.start_redis()
        self.start_celery_worker()
        self.start_flower()
        self.start_django()
        
        print("\n" + "=" * 50)
        print("üéâ –°–∏—Å—Ç–µ–º–∞ –∑–∞–ø—É—â–µ–Ω–∞!")
        print("üìä –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥: http://localhost:5555")
        print("üåê –í–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å: http://localhost:8000")
        print("üìß –ì–æ—Ç–æ–≤ –∫ –æ—Ç–ø—Ä–∞–≤–∫–µ 10,000+ –ø–∏—Å–µ–º!")
        print("=" * 50)
        print("–ù–∞–∂–º–∏—Ç–µ Ctrl+C –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏")
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
        monitor_thread = threading.Thread(target=self.monitor_processes)
        monitor_thread.daemon = True
        monitor_thread.start()
        
        # –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
        try:
            while self.running:
                time.sleep(1)
        except KeyboardInterrupt:
            self.signal_handler(signal.SIGINT, None)

def main():
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –º—ã –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
    if not Path('manage.py').exists():
        print("‚ùå –§–∞–π–ª manage.py –Ω–µ –Ω–∞–π–¥–µ–Ω")
        print("–ó–∞–ø—É—Å—Ç–∏—Ç–µ —Å–∫—Ä–∏–ø—Ç –∏–∑ –∫–æ—Ä–Ω–µ–≤–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –ø—Ä–æ–µ–∫—Ç–∞")
        sys.exit(1)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
    try:
        import celery
        import redis
        import django
    except ImportError as e:
        print(f"‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—å: {e}")
        print("–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏: pip install -r requirements.txt")
        sys.exit(1)
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º —Å–∏—Å—Ç–µ–º—É
    manager = EmailSystemManager()
    manager.run()

if __name__ == '__main__':
    main() 