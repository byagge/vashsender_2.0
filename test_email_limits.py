#!/usr/bin/env python
"""
–¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–∏—Å—Ç–µ–º—ã —É—á—ë—Ç–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö –ø–∏—Å–µ–º
"""

import os
import sys
import django

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Django
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'core.settings.dev')
django.setup()

from apps.accounts.models import User
from apps.billing.models import PurchasedPlan, Plan, PlanType
from apps.campaigns.models import Campaign, EmailTracking
from apps.billing.utils import (
    get_user_active_plan, 
    get_user_emails_remaining, 
    update_plan_emails_sent,
    get_user_plan_info,
    can_user_send_emails
)
from django.utils import timezone


def test_email_limits_system():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã —É—á—ë—Ç–∞ –ø–∏—Å–µ–º"""
    
    print("=== –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã —É—á—ë—Ç–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö –ø–∏—Å–µ–º ===\n")
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    try:
        user = User.objects.first()
        if not user:
            print("‚ùå –ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ —Å–∏—Å—Ç–µ–º–µ")
            return
        print(f"üë§ –¢–µ—Å—Ç–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user.email}")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π —Ç–∞—Ä–∏—Ñ
    active_plan = get_user_active_plan(user)
    if not active_plan:
        print("‚ùå –£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Ç–∞—Ä–∏—Ñ–∞")
        return
    
    print(f"üìã –ê–∫—Ç–∏–≤–Ω—ã–π —Ç–∞—Ä–∏—Ñ: {active_plan.plan.title}")
    print(f"üìÖ –î–µ–π—Å—Ç–≤—É–µ—Ç –¥–æ: {active_plan.end_date.strftime('%Y-%m-%d')}")
    print(f"üìä –¢–∏–ø —Ç–∞—Ä–∏—Ñ–∞: {active_plan.plan.plan_type.name}")
    
    if active_plan.plan.plan_type.name == 'Letters':
        print(f"üìß –õ–∏–º–∏—Ç –ø–∏—Å–µ–º: {active_plan.plan.emails_per_month}")
        print(f"üì§ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {active_plan.emails_sent}")
        print(f"üì• –û—Å—Ç–∞–ª–æ—Å—å: {active_plan.get_emails_remaining()}")
    
    print()
    
    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—á—ë—Ç—á–∏–∫ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–∏—Ö –æ—Ç–ø—Ä–∞–≤–æ–∫
    print("üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—á—ë—Ç—á–∏–∫–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–∏—Ö –æ—Ç–ø—Ä–∞–≤–æ–∫...")
    try:
        actual_sent = update_plan_emails_sent(user)
        print(f"‚úÖ –§–∞–∫—Ç–∏—á–µ—Å–∫–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–∏—Å–µ–º: {actual_sent}")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—á—ë—Ç—á–∏–∫–∞: {e}")
    
    print()
    
    # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–∞—Ä–∏—Ñ–µ
    print("üìä –ü–æ–ª–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–∞—Ä–∏—Ñ–µ:")
    try:
        plan_info = get_user_plan_info(user)
        for key, value in plan_info.items():
            print(f"   {key}: {value}")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç–∞—Ä–∏—Ñ–µ: {e}")
    
    print()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –æ—Ç–ø—Ä–∞–≤–∫–∏
    print("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏:")
    test_counts = [1, 10, 100, 1000]
    for count in test_counts:
        can_send = can_user_send_emails(user, count)
        status = "‚úÖ –ú–æ–∂–µ—Ç" if can_send else "‚ùå –ù–µ –º–æ–∂–µ—Ç"
        print(f"   {count} –ø–∏—Å–µ–º: {status}")
    
    print()
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–∞–º–ø–∞–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    print("üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–∞–º–ø–∞–Ω–∏–π:")
    campaigns = Campaign.objects.filter(user=user)
    print(f"   –í—Å–µ–≥–æ –∫–∞–º–ø–∞–Ω–∏–π: {campaigns.count()}")
    
    total_sent = 0
    for campaign in campaigns:
        sent = campaign.emails_sent
        total_sent += sent
        print(f"   - {campaign.name}: {sent} –ø–∏—Å–µ–º")
    
    print(f"   –ò—Ç–æ–≥–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {total_sent} –ø–∏—Å–µ–º")
    
    print()
    print("=== –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ ===")


def test_plan_creation():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∞—Ä–∏—Ñ–æ–≤"""
    
    print("=== –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∞—Ä–∏—Ñ–æ–≤ ===\n")
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞—ë–º —Ç–∏–ø—ã —Ç–∞—Ä–∏—Ñ–æ–≤
    letters_type, created = PlanType.objects.get_or_create(
        name='Letters',
        defaults={'description': '–¢–∞—Ä–∏—Ñ—ã —Å –ª–∏–º–∏—Ç–æ–º –ø–∏—Å–µ–º'}
    )
    subscribers_type, created = PlanType.objects.get_or_create(
        name='Subscribers', 
        defaults={'description': '–¢–∞—Ä–∏—Ñ—ã —Å –ª–∏–º–∏—Ç–æ–º –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤'}
    )
    
    print(f"üìã –¢–∏–ø —Ç–∞—Ä–∏—Ñ–∞ 'Letters': {letters_type.name}")
    print(f"üìã –¢–∏–ø —Ç–∞—Ä–∏—Ñ–∞ 'Subscribers': {subscribers_type.name}")
    
    # –°–æ–∑–¥–∞—ë–º —Ç–µ—Å—Ç–æ–≤—ã–µ —Ç–∞—Ä–∏—Ñ—ã
    test_plans = [
        {
            'title': '–¢–µ—Å—Ç 100 –ø–∏—Å–µ–º',
            'plan_type': letters_type,
            'emails_per_month': 100,
            'subscribers': 0,
            'price': 0
        },
        {
            'title': '–¢–µ—Å—Ç 1000 –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤',
            'plan_type': subscribers_type,
            'emails_per_month': 0,
            'subscribers': 1000,
            'price': 0
        }
    ]
    
    for plan_data in test_plans:
        plan, created = Plan.objects.get_or_create(
            title=plan_data['title'],
            defaults=plan_data
        )
        status = "—Å–æ–∑–¥–∞–Ω" if created else "—É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç"
        print(f"üì¶ –¢–∞—Ä–∏—Ñ '{plan.title}': {status}")
    
    print()
    print("=== –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞—Ä–∏—Ñ–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–æ ===")


if __name__ == '__main__':
    print("üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ —Å–∏—Å—Ç–µ–º—ã —É—á—ë—Ç–∞ –ø–∏—Å–µ–º...\n")
    
    try:
        test_plan_creation()
        print()
        test_email_limits_system()
    except Exception as e:
        print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        import traceback
        traceback.print_exc() 