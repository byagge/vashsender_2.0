#!/usr/bin/env python
"""
–¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –≥–ª—É–±–æ–∫–æ–π –≤–∞–ª–∏–¥–∞—Ü–∏–∏ email –∞–¥—Ä–µ—Å–æ–≤
"""

import os
import sys
import django
import time

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Django
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'core.settings.dev')
django.setup()

from apps.mailer.utils import validate_email_production, classify_email, check_smtp_connection
from apps.mailer.models import Contact

def test_email_validation():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –≤–∞–ª–∏–¥–∞—Ü–∏—é —Ä–∞–∑–ª–∏—á–Ω—ã—Ö email –∞–¥—Ä–µ—Å–æ–≤"""
    
    test_emails = [
        # –°—É—â–µ—Å—Ç–≤—É—é—â–∏–µ email (–¥–æ–ª–∂–Ω—ã –±—ã—Ç—å VALID)
        "test@gmail.com",
        "admin@yahoo.com", 
        "support@hotmail.com",
        "info@outlook.com",
        "contact@mail.ru",
        "help@yandex.ru",
        
        # –ù–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ email (–¥–æ–ª–∂–Ω—ã –±—ã—Ç—å INVALID)
        "nonexistent123456789@gmail.com",
        "fakeuser123456789@yahoo.com",
        "invalid123456789@hotmail.com",
        "wrong123456789@outlook.com",
        "bademail123456789@mail.ru",
        "fake123456789@yandex.ru",
        
        # –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Å–∏–Ω—Ç–∞–∫—Å–∏—Å (–¥–æ–ª–∂–Ω—ã –±—ã—Ç—å INVALID)
        "invalid-email",
        "test@",
        "@domain.com",
        "test..test@domain.com",
        "test@domain..com",
        
        # –ó–∞—Ä–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–æ–º–µ–Ω—ã (–¥–æ–ª–∂–Ω—ã –±—ã—Ç—å INVALID)
        "test@example.com",
        "user@test.com",
        "admin@localhost.com",
        
        # Disposable –¥–æ–º–µ–Ω—ã (–¥–æ–ª–∂–Ω—ã –±—ã—Ç—å BLACKLIST)
        "temp@10minutemail.com",
        "user@guerrillamail.com",
        "test@mailinator.com",
        "temp@yopmail.com",
        
        # –î–æ–º–µ–Ω—ã –±–µ–∑ MX –∑–∞–ø–∏—Å–µ–π (–¥–æ–ª–∂–Ω—ã –±—ã—Ç—å INVALID)
        "test@nonexistentdomain123456789.com",
        "user@invaliddomain123456789.org",
    ]
    
    print("=== –¢–µ—Å—Ç –≥–ª—É–±–æ–∫–æ–π –≤–∞–ª–∏–¥–∞—Ü–∏–∏ email ===\n")
    
    results = {
        'valid': [],
        'invalid': [],
        'blacklist': [],
        'errors': []
    }
    
    for i, email in enumerate(test_emails, 1):
        print(f"[{i:2d}/{len(test_emails)}] –ü—Ä–æ–≤–µ—Ä—è–µ–º: {email}")
        
        try:
            start_time = time.time()
            
            # –ü–æ–ª–Ω–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è
            validation_result = validate_email_production(email)
            
            # –ë—ã—Å—Ç—Ä–∞—è –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è
            classification = classify_email(email)
            
            elapsed_time = time.time() - start_time
            
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            status = validation_result['status']
            confidence = validation_result.get('confidence', 'unknown')
            
            if status == Contact.VALID:
                results['valid'].append(email)
                print(f"    ‚úÖ VALID ({confidence}) - {elapsed_time:.2f}—Å")
            elif status == Contact.INVALID:
                results['invalid'].append(email)
                errors = ', '.join(validation_result.get('errors', []))
                print(f"    ‚ùå INVALID - {errors} ({elapsed_time:.2f}—Å)")
            elif status == Contact.BLACKLIST:
                results['blacklist'].append(email)
                print(f"    ‚ö†Ô∏è  BLACKLIST - {elapsed_time:.2f}—Å")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏
            if classification != status:
                print(f"    ‚ö†Ô∏è  –í–ù–ò–ú–ê–ù–ò–ï: classify_email() –≤–µ—Ä–Ω—É–ª {classification}, –∞ validate_email_production() –≤–µ—Ä–Ω—É–ª {status}")
            
        except Exception as e:
            results['errors'].append(f"{email}: {str(e)}")
            print(f"    üí• –û–®–ò–ë–ö–ê: {str(e)}")
        
        print()
    
    # –í—ã–≤–æ–¥–∏–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    print("=== –°–¢–ê–¢–ò–°–¢–ò–ö–ê ===")
    print(f"–í—Å–µ–≥–æ –ø—Ä–æ–≤–µ—Ä–µ–Ω–æ: {len(test_emails)}")
    print(f"VALID: {len(results['valid'])}")
    print(f"INVALID: {len(results['invalid'])}")
    print(f"BLACKLIST: {len(results['blacklist'])}")
    print(f"–û—à–∏–±–∫–∏: {len(results['errors'])}")
    
    print("\n=== –î–ï–¢–ê–õ–ò ===")
    
    if results['valid']:
        print(f"\n‚úÖ –í–∞–ª–∏–¥–Ω—ã–µ email ({len(results['valid'])}):")
        for email in results['valid']:
            print(f"  - {email}")
    
    if results['invalid']:
        print(f"\n‚ùå –ù–µ–≤–∞–ª–∏–¥–Ω—ã–µ email ({len(results['invalid'])}):")
        for email in results['invalid']:
            print(f"  - {email}")
    
    if results['blacklist']:
        print(f"\n‚ö†Ô∏è  Blacklist email ({len(results['blacklist'])}):")
        for email in results['blacklist']:
            print(f"  - {email}")
    
    if results['errors']:
        print(f"\nüí• –û—à–∏–±–∫–∏ ({len(results['errors'])}):")
        for error in results['errors']:
            print(f"  - {error}")

def test_smtp_connection():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç SMTP –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö email"""
    
    print("\n=== –¢–µ—Å—Ç SMTP –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è ===\n")
    
    test_cases = [
        ("test@gmail.com", "–î–æ–ª–∂–µ–Ω —Å—É—â–µ—Å—Ç–≤–æ–≤–∞—Ç—å"),
        ("nonexistent123456789@gmail.com", "–ù–µ –¥–æ–ª–∂–µ–Ω —Å—É—â–µ—Å—Ç–≤–æ–≤–∞—Ç—å"),
        ("admin@yahoo.com", "–î–æ–ª–∂–µ–Ω —Å—É—â–µ—Å—Ç–≤–æ–≤–∞—Ç—å"),
        ("fakeuser123456789@yahoo.com", "–ù–µ –¥–æ–ª–∂–µ–Ω —Å—É—â–µ—Å—Ç–≤–æ–≤–∞—Ç—å"),
    ]
    
    for email, description in test_cases:
        print(f"–ü—Ä–æ–≤–µ—Ä—è–µ–º: {email} ({description})")
        
        try:
            start_time = time.time()
            result = check_smtp_connection(email)
            elapsed_time = time.time() - start_time
            
            if result['valid']:
                print(f"  ‚úÖ –°—É—â–µ—Å—Ç–≤—É–µ—Ç - {elapsed_time:.2f}—Å")
            else:
                print(f"  ‚ùå –ù–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: {result['error']} - {elapsed_time:.2f}—Å")
                
        except Exception as e:
            print(f"  üí• –û—à–∏–±–∫–∞: {str(e)}")
        
        print()

if __name__ == '__main__':
    test_email_validation()
    test_smtp_connection() 