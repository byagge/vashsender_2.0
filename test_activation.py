#!/usr/bin/env python
"""
–¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç—ã activate_payment
"""

import os
import sys
import django
import json

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –ø—Ä–æ–µ–∫—Ç—É
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Django
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'core.settings.dev')
django.setup()

from apps.billing.models import Plan, PurchasedPlan, BillingSettings
from apps.accounts.models import User
from django.utils import timezone
from datetime import timedelta

def test_activation():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ PurchasedPlan"""
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ —Ç–∞—Ä–∏—Ñ–∞...")
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user = User.objects.filter(email='admin@vashsender.ru').first()
        if not user:
            print("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å admin@vashsender.ru –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return False
        
        # –ü–æ–ª—É—á–∞–µ–º –ø–ª–∞–Ω
        plan = Plan.objects.filter(id=69).first()
        if not plan:
            print("‚ùå –ü–ª–∞–Ω —Å ID 69 –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return False
        
        print(f"‚úÖ –ù–∞–π–¥–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user.email}")
        print(f"‚úÖ –ù–∞–π–¥–µ–Ω –ø–ª–∞–Ω: {plan.title}")
        
        # –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–ª–∞—Ç–µ–∂–∞
        test_payment_data = {
            'transactionId': 'TEST-' + str(int(timezone.now().timestamp())),
            'status': 'success',
            'amount': float(plan.get_final_price()),
            'currency': 'RUB'
        }
        
        print(f"üìã –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–ª–∞—Ç–µ–∂–∞: {test_payment_data}")
        
        # –°–æ–∑–¥–∞–µ–º PurchasedPlan
        purchased_plan = PurchasedPlan.objects.create(
            user=user,
            plan=plan,
            start_date=timezone.now(),
            end_date=timezone.now() + timedelta(days=30),
            is_active=True,
            amount_paid=plan.get_final_price(),
            payment_method='cloudpayments',
            transaction_id=test_payment_data['transactionId'],
            cloudpayments_data=test_payment_data
        )
        
        print(f"‚úÖ PurchasedPlan —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ!")
        print(f"   ID: {purchased_plan.id}")
        print(f"   Transaction ID: {purchased_plan.transaction_id}")
        print(f"   Amount: {purchased_plan.amount_paid}")
        print(f"   End date: {purchased_plan.end_date}")
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—É—â–∏–π –ø–ª–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user.current_plan = plan
        user.plan_expiry = purchased_plan.end_date
        user.save()
        
        print(f"‚úÖ –ü–ª–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω: {user.current_plan.title}")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏: {e}")
        import traceback
        traceback.print_exc()
        return False

if __name__ == "__main__":
    test_activation() 