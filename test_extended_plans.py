#!/usr/bin/env python
"""
–¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã—Ö —Ç–∞—Ä–∏—Ñ–æ–≤
"""

import os
import sys
import django

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Django
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'core.settings.dev')
django.setup()

from apps.billing.models import Plan, PlanType
from apps.billing.utils import get_user_plan_info, can_user_send_emails
from apps.accounts.models import User


def test_plans_creation():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∞—Ä–∏—Ñ–æ–≤"""
    print("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∞—Ä–∏—Ñ–æ–≤...")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø—ã —Ç–∞—Ä–∏—Ñ–æ–≤
    plan_types = PlanType.objects.all()
    print(f"üìã –ù–∞–π–¥–µ–Ω–æ —Ç–∏–ø–æ–≤ —Ç–∞—Ä–∏—Ñ–æ–≤: {plan_types.count()}")
    for pt in plan_types:
        print(f"  - {pt.name}: {pt.description}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∞—Ä–∏—Ñ—ã
    plans = Plan.objects.filter(is_active=True).order_by('sort_order')
    print(f"\nüìä –ù–∞–π–¥–µ–Ω–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ç–∞—Ä–∏—Ñ–æ–≤: {plans.count()}")
    
    for plan in plans:
        if plan.plan_type.name == 'Letters':
            limit = f"{plan.emails_per_month:,} –ø–∏—Å–µ–º"
        elif plan.plan_type.name == 'Subscribers':
            limit = f"{plan.subscribers:,} –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤"
        else:
            limit = f"{plan.subscribers} –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤, –Ω–µ–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω—ã–µ –ø–∏—Å—å–º–∞"
        
        print(f"  - {plan.title}: {limit} - {plan.price}‚ÇΩ (ID: {plan.id})")
    
    return plans.count() > 0


def test_plan_search():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–∏—Å–∫–∞ —Ç–∞—Ä–∏—Ñ–æ–≤"""
    print("\nüîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–∏—Å–∫–∞ —Ç–∞—Ä–∏—Ñ–æ–≤...")
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–∏—Å–∫ —Ç–∞—Ä–∏—Ñ–æ–≤ –ø–æ –ø–æ–¥–ø–∏—Å—á–∏–∫–∞–º
    subscribers_plans = Plan.objects.filter(
        plan_type__name='Subscribers',
        is_active=True
    ).order_by('subscribers')
    
    test_values = [1000, 5000, 10000, 50000, 100000, 500000, 1000000]
    
    for value in test_values:
        # –ò—â–µ–º –ø–æ–¥—Ö–æ–¥—è—â–∏–π —Ç–∞—Ä–∏—Ñ
        suitable_plan = None
        min_difference = float('inf')
        
        for plan in subscribers_plans:
            if plan.subscribers >= value:
                difference = plan.subscribers - value
                if difference < min_difference:
                    min_difference = difference
                    suitable_plan = plan
        
        if suitable_plan:
            print(f"  {value:,} –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ ‚Üí {suitable_plan.title} ({suitable_plan.subscribers:,})")
        else:
            print(f"  {value:,} –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ ‚Üí –Ω–µ –Ω–∞–π–¥–µ–Ω –ø–æ–¥—Ö–æ–¥—è—â–∏–π —Ç–∞—Ä–∏—Ñ")
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–∏—Å–∫ —Ç–∞—Ä–∏—Ñ–æ–≤ –ø–æ –ø–∏—Å—å–º–∞–º
    letters_plans = Plan.objects.filter(
        plan_type__name='Letters',
        is_active=True
    ).order_by('emails_per_month')
    
    test_emails = [1000, 5000, 10000, 50000, 100000, 500000, 1000000]
    
    print("\nüìß –ü–æ–∏—Å–∫ —Ç–∞—Ä–∏—Ñ–æ–≤ –ø–æ –ø–∏—Å—å–º–∞–º:")
    for value in test_emails:
        # –ò—â–µ–º –ø–æ–¥—Ö–æ–¥—è—â–∏–π —Ç–∞—Ä–∏—Ñ
        suitable_plan = None
        min_difference = float('inf')
        
        for plan in letters_plans:
            if plan.emails_per_month >= value:
                difference = plan.emails_per_month - value
                if difference < min_difference:
                    min_difference = difference
                    suitable_plan = plan
        
        if suitable_plan:
            print(f"  {value:,} –ø–∏—Å–µ–º ‚Üí {suitable_plan.title} ({suitable_plan.emails_per_month:,})")
        else:
            print(f"  {value:,} –ø–∏—Å–µ–º ‚Üí –Ω–µ –Ω–∞–π–¥–µ–Ω –ø–æ–¥—Ö–æ–¥—è—â–∏–π —Ç–∞—Ä–∏—Ñ")


def test_user_plan_info():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç–∞—Ä–∏—Ñ–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    print("\nüë§ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç–∞—Ä–∏—Ñ–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è...")
    
    # –ü–æ–ª—É—á–∞–µ–º –ø–µ—Ä–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    try:
        user = User.objects.first()
        if not user:
            print("  ‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            return
        
        print(f"  –¢–µ—Å—Ç–∏—Ä—É–µ–º –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {user.email}")
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–∞—Ä–∏—Ñ–µ
        plan_info = get_user_plan_info(user)
        
        print(f"  –ï—Å—Ç—å —Ç–∞—Ä–∏—Ñ: {plan_info.get('has_plan', False)}")
        if plan_info.get('has_plan'):
            print(f"  –ù–∞–∑–≤–∞–Ω–∏–µ —Ç–∞—Ä–∏—Ñ–∞: {plan_info.get('plan_name')}")
            print(f"  –¢–∏–ø —Ç–∞—Ä–∏—Ñ–∞: {plan_info.get('plan_type')}")
            print(f"  –õ–∏–º–∏—Ç –ø–∏—Å–µ–º: {plan_info.get('emails_limit')}")
            print(f"  –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–∏—Å–µ–º: {plan_info.get('emails_sent')}")
            print(f"  –û—Å—Ç–∞–ª–æ—Å—å –ø–∏—Å–µ–º: {plan_info.get('emails_remaining')}")
            print(f"  –î–Ω–µ–π –æ—Å—Ç–∞–ª–æ—Å—å: {plan_info.get('days_remaining')}")
            print(f"  –ò—Å—Ç–µ–∫: {plan_info.get('is_expired')}")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏
        test_counts = [1, 10, 100, 1000]
        for count in test_counts:
            can_send = can_user_send_emails(user, count)
            print(f"  –ú–æ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å {count} –ø–∏—Å–µ–º: {can_send}")
            
    except Exception as e:
        print(f"  ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏: {e}")


def test_pricing_calculation():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞—Å—á–µ—Ç–∞ —Ü–µ–Ω"""
    print("\nüí∞ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞—Å—á–µ—Ç–∞ —Ü–µ–Ω...")
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∏–Ω—Ç–µ—Ä–ø–æ–ª—è—Ü–∏—é —Ü–µ–Ω –¥–ª—è –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤
    subscribers_plans = Plan.objects.filter(
        plan_type__name='Subscribers',
        is_active=True
    ).order_by('subscribers')
    
    test_values = [1500, 3000, 7500, 15000, 75000, 150000, 750000]
    
    for value in test_values:
        # –ù–∞—Ö–æ–¥–∏–º –±–ª–∏–∂–∞–π—à–∏–µ —Ç–∞—Ä–∏—Ñ—ã
        lower_plan = None
        upper_plan = None
        
        for plan in subscribers_plans:
            if plan.subscribers <= value:
                lower_plan = plan
            if plan.subscribers >= value and not upper_plan:
                upper_plan = plan
        
        if lower_plan and upper_plan:
            # –ò–Ω—Ç–µ—Ä–ø–æ–ª–∏—Ä—É–µ–º —Ü–µ–Ω—É
            ratio = (value - lower_plan.subscribers) / (upper_plan.subscribers - lower_plan.subscribers)
            interpolated_price = lower_plan.price + (upper_plan.price - lower_plan.price) * ratio
            
            print(f"  {value:,} –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ ‚Üí {interpolated_price:.0f}‚ÇΩ "
                  f"({lower_plan.subscribers:,}‚ÇΩ - {upper_plan.subscribers:,}‚ÇΩ)")
        else:
            print(f"  {value:,} –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ ‚Üí –Ω–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å—Å—á–∏—Ç–∞—Ç—å")


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("üöÄ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã—Ö —Ç–∞—Ä–∏—Ñ–æ–≤")
    print("=" * 50)
    
    # –¢–µ—Å—Ç 1: –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞—Ä–∏—Ñ–æ–≤
    if not test_plans_creation():
        print("‚ùå –û—à–∏–±–∫–∞: —Ç–∞—Ä–∏—Ñ—ã –Ω–µ —Å–æ–∑–¥–∞–Ω—ã")
        return
    
    # –¢–µ—Å—Ç 2: –ü–æ–∏—Å–∫ —Ç–∞—Ä–∏—Ñ–æ–≤
    test_plan_search()
    
    # –¢–µ—Å—Ç 3: –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–∞—Ä–∏—Ñ–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    test_user_plan_info()
    
    # –¢–µ—Å—Ç 4: –†–∞—Å—á–µ—Ç —Ü–µ–Ω
    test_pricing_calculation()
    
    print("\n" + "=" * 50)
    print("‚úÖ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")


if __name__ == "__main__":
    main() 