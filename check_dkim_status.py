#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è DKIM –Ω–∞—Å—Ç—Ä–æ–µ–∫
"""

import os
import sys
import subprocess
import dns.resolver
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ Django –ø—Ä–æ–µ–∫—Ç—É
sys.path.append('/var/www/vashsender')
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'core.settings.production')

import django
django.setup()

from apps.emails.models import Domain
from django.conf import settings

def check_opendkim_service():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–ª—É–∂–±—ã OpenDKIM"""
    
    print("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–ª—É–∂–±—ã OpenDKIM...")
    
    try:
        result = subprocess.run(['systemctl', 'is-active', 'opendkim'], 
                              capture_output=True, text=True, check=False)
        if result.returncode == 0:
            print("‚úÖ OpenDKIM –∑–∞–ø—É—â–µ–Ω")
        else:
            print("‚ùå OpenDKIM –Ω–µ –∑–∞–ø—É—â–µ–Ω")
            return False
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ OpenDKIM: {e}")
        return False
    
    return True

def check_opendkim_config():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ OpenDKIM"""
    
    print("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ OpenDKIM...")
    
    config_files = [
        "/etc/opendkim.conf",
        "/etc/opendkim/KeyTable",
        "/etc/opendkim/SigningTable",
        "/etc/opendkim/TrustedHosts"
    ]
    
    for config_file in config_files:
        if os.path.exists(config_file):
            print(f"‚úÖ {config_file} —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
        else:
            print(f"‚ùå {config_file} –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return False
    
    return True

def check_domains_and_keys():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ–º–µ–Ω–æ–≤ –∏ –∫–ª—é—á–µ–π"""
    
    print("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ–º–µ–Ω–æ–≤ –∏ DKIM –∫–ª—é—á–µ–π...")
    
    domains = Domain.objects.all()
    
    if not domains.exists():
        print("‚ùå –ù–µ—Ç –¥–æ–º–µ–Ω–æ–≤ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")
        return False
    
    keys_dir = getattr(settings, 'DKIM_KEYS_DIR', '/etc/opendkim/keys')
    
    for domain in domains:
        print(f"\nüìã –î–æ–º–µ–Ω: {domain.domain_name}")
        print(f"   –°–µ–ª–µ–∫—Ç–æ—Ä: {domain.dkim_selector}")
        print(f"   DKIM –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω: {'‚úÖ' if domain.dkim_verified else '‚ùå'}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∏–≤–∞—Ç–Ω—ã–π –∫–ª—é—á
        if domain.private_key_path and os.path.exists(domain.private_key_path):
            key_path = domain.private_key_path
            print(f"   –ü—Ä–∏–≤–∞—Ç–Ω—ã–π –∫–ª—é—á (DB): ‚úÖ {key_path}")
        else:
            key_path = os.path.join(keys_dir, domain.domain_name, f"{domain.dkim_selector}.private")
            if os.path.exists(key_path):
                print(f"   –ü—Ä–∏–≤–∞—Ç–Ω—ã–π –∫–ª—é—á (fallback): ‚úÖ {key_path}")
            else:
                print(f"   –ü—Ä–∏–≤–∞—Ç–Ω—ã–π –∫–ª—é—á: ‚ùå –Ω–µ –Ω–∞–π–¥–µ–Ω")
                continue
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—É–±–ª–∏—á–Ω—ã–π –∫–ª—é—á
        public_key_path = os.path.join(keys_dir, domain.domain_name, f"{domain.dkim_selector}.txt")
        if os.path.exists(public_key_path):
            print(f"   –ü—É–±–ª–∏—á–Ω—ã–π –∫–ª—é—á: ‚úÖ {public_key_path}")
        else:
            print(f"   –ü—É–±–ª–∏—á–Ω—ã–π –∫–ª—é—á: ‚ùå –Ω–µ –Ω–∞–π–¥–µ–Ω")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º DNS –∑–∞–ø–∏—Å—å
        try:
            selector_domain = f"{domain.dkim_selector}._domainkey.{domain.domain_name}"
            answers = dns.resolver.resolve(selector_domain, "TXT")
            for answer in answers:
                txt_record = ''.join([part.decode() if isinstance(part, bytes) else part for part in answer.strings])
                if 'v=DKIM1' in txt_record:
                    print(f"   DNS DKIM –∑–∞–ø–∏—Å—å: ‚úÖ –Ω–∞–π–¥–µ–Ω–∞")
                    break
            else:
                print(f"   DNS DKIM –∑–∞–ø–∏—Å—å: ‚ùå –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        except Exception as e:
            print(f"   DNS DKIM –∑–∞–ø–∏—Å—å: ‚ùå –æ—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ ({e})")

def check_postfix_integration():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å Postfix"""
    
    print("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ Postfix —Å OpenDKIM...")
    
    main_cf = "/etc/postfix/main.cf"
    
    try:
        with open(main_cf, 'r') as f:
            content = f.read()
        
        if 'smtpd_milters' in content and 'inet:localhost:12301' in content:
            print("‚úÖ Postfix –Ω–∞—Å—Ç—Ä–æ–µ–Ω –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å OpenDKIM")
        else:
            print("‚ùå Postfix –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å OpenDKIM")
            return False
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ Postfix: {e}")
        return False
    
    return True

def check_milter_socket():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–∫–µ—Ç–∞ milter"""
    
    print("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–∫–µ—Ç–∞ OpenDKIM milter...")
    
    try:
        result = subprocess.run(['netstat', '-tlnp'], capture_output=True, text=True, check=False)
        if ':12301' in result.stdout:
            print("‚úÖ OpenDKIM milter —Å–ª—É—à–∞–µ—Ç –Ω–∞ –ø–æ—Ä—Ç—É 12301")
        else:
            print("‚ùå OpenDKIM milter –Ω–µ —Å–ª—É—à–∞–µ—Ç –Ω–∞ –ø–æ—Ä—Ç—É 12301")
            return False
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ–∫–µ—Ç–∞: {e}")
        return False
    
    return True

def show_recent_logs():
    """–ü–æ–∫–∞–∑–∞—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–µ –ª–æ–≥–∏"""
    
    print("üìã –ü–æ—Å–ª–µ–¥–Ω–∏–µ –ª–æ–≥–∏ OpenDKIM:")
    
    try:
        result = subprocess.run(['journalctl', '-u', 'opendkim', '--no-pager', '-n', '20'], 
                              capture_output=True, text=True, check=False)
        if result.stdout:
            print(result.stdout)
        else:
            print("–õ–æ–≥–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ª–æ–≥–æ–≤: {e}")

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    
    print("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è DKIM –¥–ª—è VashSender")
    print("=" * 50)
    
    checks = [
        ("–°–ª—É–∂–±–∞ OpenDKIM", check_opendkim_service),
        ("–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è OpenDKIM", check_opendkim_config),
        ("–î–æ–º–µ–Ω—ã –∏ –∫–ª—é—á–∏", check_domains_and_keys),
        ("–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å Postfix", check_postfix_integration),
        ("–°–æ–∫–µ—Ç milter", check_milter_socket),
    ]
    
    all_passed = True
    
    for check_name, check_func in checks:
        print(f"\nüìã {check_name}...")
        if not check_func():
            all_passed = False
    
    print("\n" + "=" * 50)
    
    if all_passed:
        print("üéâ –í—Å–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ!")
        print("‚úÖ DKIM –¥–æ–ª–∂–µ–Ω —Ä–∞–±–æ—Ç–∞—Ç—å –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
    else:
        print("‚ùå –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–æ–π DKIM")
        print("üí° –ó–∞–ø—É—Å—Ç–∏—Ç–µ setup_opendkim_auto.py –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –Ω–∞—Å—Ç—Ä–æ–π–∫–∏")
    
    print("\nüìã –õ–æ–≥–∏ OpenDKIM:")
    show_recent_logs()

if __name__ == "__main__":
    main()
